import pygame, sys, math

# =========================
# 1) CONFIGURACIÓN BÁSICA
# =========================
pygame.init()
ANCHO, ALTO, FPS = 800, 600, 60

# Colores
BLANCO=(255,255,255); NEGRO=(0,0,0)
AZUL=(100,150,255); AMARILLO=(255,255,100)
ROJO=(255,100,100); GRIS=(128,128,128); GRIS_CLARO=(200,200,200)
CELESTE_CLARO=(173,216,230)
MARRON=(160,82,45); MARRON_OSCURO=(101,67,33)

# =========================
# 2) FUNCIONES DE UI
# =========================
def clamp(v): return max(0, min(100, v))

def draw_bar(screen, x, y, w, h, val, color):
    pygame.draw.rect(screen, GRIS, (x, y, w, h))
    pygame.draw.rect(screen, color, (x, y, w*(val/100), h))
    pygame.draw.rect(screen, NEGRO, (x, y, w, h), 2)

def draw_button(screen, x, y, w, h, texto, font, fondo=GRIS_CLARO):
    pygame.draw.rect(screen, fondo, (x, y, w, h))
    pygame.draw.rect(screen, NEGRO, (x, y, w, h), 2)
    surf = font.render(texto, True, NEGRO)
    rect = surf.get_rect(center=(x+w//2, y+h//2))
    screen.blit(surf, rect)
    return pygame.Rect(x, y, w, h)

# =========================
# 3) LÓGICA DE LA MASCOTA
# =========================
class Mascota:
    def __init__(self, nombre):
        self.nombre = nombre
        self.felicidad = 50
        self.energia   = 50
        self.hambre    = 50
        self.x, self.y = ANCHO//2, ALTO//2
        self.estado_animacion = "normal"  # normal | jugando | comiendo | durmiendo
        self.animacion_tiempo = 0

    def _sync(self):
        self.felicidad = clamp(self.felicidad)
        self.energia   = clamp(self.energia)
        self.hambre    = clamp(self.hambre)

    def _anima(self, estado):
        self.estado_animacion = estado
        self.animacion_tiempo = pygame.time.get_ticks()

    def jugar(self):
        self.felicidad += 15
        self.energia   -= 10
        self.hambre    += 10
        self._sync(); self._anima("jugando")
        return f"{self.nombre} está jugando"

    def comer(self):
        self.hambre -= 30
        self.energia += 5
        self._sync(); self._anima("comiendo")
        return f"{self.nombre} comió"

    def dormir(self):
        self.energia   += 25
        self.felicidad -= 5
        self.hambre    += 10
        self._sync(); self._anima("durmiendo")
        return f"{self.nombre} está durmiendo"

    def get_estado_emocional(self):
        e=[]
        if   self.felicidad >= 90: e.append("Muy feliz")
        elif self.felicidad <= 30: e.append("Triste")
        if   self.energia   >= 90: e.append("Energético")
        elif self.energia   <= 30: e.append("Cansado")
        if   self.hambre    >= 80: e.append("Hambriento")
        elif self.hambre    <= 20: e.append("Lleno")
        return e or ["Normal"]

    def actualizar_animacion(self):
        # a los 2s se termina la animación y vuelve a 'normal' (cara neutral)
        if pygame.time.get_ticks() - self.animacion_tiempo > 2000:
            self.estado_animacion = "normal"

# =========================
# 4) DIBUJAR EL PERRO
# =========================
def dibujar_perro(screen, m):
    t = pygame.time.get_ticks()
    x, y = m.x, m.y
    if m.estado_animacion == "jugando":
        y += int(10 * math.sin((t - m.animacion_tiempo) / 100))

    # Cuerpo
    pygame.draw.ellipse(screen, MARRON, (x-40, y-20, 80, 60))
    pygame.draw.circle(screen, MARRON, (x, y-40), 35)
    pygame.draw.ellipse(screen, MARRON_OSCURO, (x-45, y-65, 25, 40))
    pygame.draw.ellipse(screen, MARRON_OSCURO, (x+20, y-65, 25, 40))
    for dx in (-30, -10, 10, 25):
        pygame.draw.ellipse(screen, MARRON, (x+dx, y+15, 15, 35))

    # Cola
    if m.estado_animacion == "jugando" or m.felicidad >= 70:
        ang = math.sin(t/200) * 0.5
        cx = x+35 + int(15*math.cos(ang))
        cy = y-10 + int(15*math.sin(ang))
    else:
        cx, cy = x+35, y+5
    pygame.draw.ellipse(screen, MARRON, (cx-5, cy-15, 10, 30))

    # Nariz
    pygame.draw.circle(screen, NEGRO, (x, y-35), 3)

    # Caras
    if m.estado_animacion == "durmiendo":
        pygame.draw.line(screen, NEGRO, (x-15, y-45), (x-5, y-45), 3)
        pygame.draw.line(screen, NEGRO, (x+5,  y-45), (x+15, y-45), 3)
        pygame.draw.line(screen, NEGRO, (x-8, y-30), (x+8, y-30), 2)

    elif m.estado_animacion == "comiendo":
        pygame.draw.circle(screen, NEGRO, (x-12, y-45), 5)
        pygame.draw.circle(screen, NEGRO, (x+12, y-45), 5)
        pygame.draw.ellipse(screen, NEGRO, (x-8, y-28, 16, 12))

    elif m.estado_animacion == "jugando":
        # Ojos + SONRISA clara mientras juega
        pygame.draw.circle(screen, NEGRO, (x-12, y-45), 5)
        pygame.draw.circle(screen, NEGRO, (x+12, y-45), 5)
        pygame.draw.arc(screen, NEGRO, (x-15, y-35, 30, 20), math.pi, 2*math.pi, 3)

    else:
        # *** CARA NEUTRA (post-animación) ***
        # ojos simples
        pygame.draw.circle(screen, NEGRO, (x-12, y-45), 4)
        pygame.draw.circle(screen, NEGRO, (x+12, y-45), 4)
        # boca recta (no sonrisa)
        pygame.draw.line(screen, NEGRO, (x-8, y-30), (x+8, y-30), 2)

# =========================
# 5) PANTALLA PARA NOMBRE
# =========================
def pantalla_nombre():
    screen = pygame.display.set_mode((ANCHO, ALTO))
    pygame.display.set_caption("Mascota Virtual - Elegir Nombre")
    clock = pygame.time.Clock()
    font = pygame.font.Font(None, 36)
    nombre = ""
    while True:
        for e in pygame.event.get():
            if e.type == pygame.QUIT:
                pygame.quit(); sys.exit()
            if e.type == pygame.KEYDOWN:
                if e.key == pygame.K_RETURN and nombre.strip():
                    return nombre.strip()
                if e.key == pygame.K_BACKSPACE:
                    nombre = nombre[:-1]
                elif len(nombre) < 15 and e.unicode.isprintable():
                    nombre += e.unicode

        screen.fill(AZUL)
        titulo = font.render("Ingresa el nombre de tu mascota:", True, BLANCO)
        screen.blit(titulo, (200, 200))
        pygame.draw.rect(screen, BLANCO, (200, 250, 400, 50))
        pygame.draw.rect(screen, NEGRO, (200, 250, 400, 50), 2)
        txt = font.render(nombre, True, NEGRO)
        screen.blit(txt, (210, 260))
        pygame.display.flip()
        clock.tick(FPS)

# =========================
# 6) JUEGO PRINCIPAL
# =========================
def main():
    nombre = pantalla_nombre()
    screen = pygame.display.set_mode((ANCHO, ALTO))
    pygame.display.set_caption(f"Mascota Virtual - {nombre}")
    clock = pygame.time.Clock()
    font  = pygame.font.Font(None, 24)
    fbig  = pygame.font.Font(None, 32)

    m = Mascota(nombre)
    mensaje = ""
    t_msg = 0

    acciones = {
        "Jugar":  (m.jugar,  50),
        "Comer":  (m.comer, 200),
        "Dormir": (m.dormir,350)
    }

    while True:
        for e in pygame.event.get():
            if e.type == pygame.QUIT:
                pygame.quit(); sys.exit()
            if e.type == pygame.MOUSEBUTTONDOWN:
                pos = e.pos
                for txt, (fn, x0) in acciones.items():
                    if pygame.Rect(x0, 500, 120, 40).collidepoint(pos):
                        mensaje = fn()
                        t_msg = pygame.time.get_ticks()

        m.actualizar_animacion()

        screen.fill(CELESTE_CLARO)
        screen.blit(fbig.render(f"Mascota: {m.nombre}", True, NEGRO), (20, 20))

        screen.blit(font.render("Felicidad:", True, NEGRO), (20, 70));  draw_bar(screen,120,70,200,20,m.felicidad,AMARILLO)
        screen.blit(font.render("Energía:",   True, NEGRO), (20,100));  draw_bar(screen,120,100,200,20,m.energia,AZUL)
        screen.blit(font.render("Hambre:",    True, NEGRO), (20,130));  draw_bar(screen,120,130,200,20,m.hambre,ROJO)

        estado = "Estado: " + ", ".join(m.get_estado_emocional())
        screen.blit(font.render(estado, True, NEGRO), (20, 160))

        dibujar_perro(screen, m)

        for txt, (fn, x0) in acciones.items():
            draw_button(screen, x0, 500, 120, 40, txt, font)

        if mensaje and pygame.time.get_ticks() - t_msg < 3000:
            surf = font.render(mensaje, True, NEGRO)
            rect = surf.get_rect(center=(ANCHO//2, 450))
            pygame.draw.rect(screen, BLANCO, rect.inflate(20,10))
            pygame.draw.rect(screen, NEGRO,  rect.inflate(20,10), 2)
            screen.blit(surf, rect)

        pygame.display.flip()
        clock.tick(FPS)

if __name__ == "__main__":
    main()